# Copyright 2022 The KubeEdge Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Sedna Federated Learning JobBase"""
# pylint: disable=C0412
import copy
from sedna.core.base import JobBase


# pylint: disable=C0412
class FederatedLearning(JobBase):
    """Federated Learning JobBase Represent the Federated Learning Client side"""

    # pylint: disable=too-many-locals
    def __init__(self, estimator):
        super().__init__(estimator)
        cp_estimator = copy.deepcopy(estimator)
        self.estimator = cp_estimator

    # pylint: disable=W0221
    def train(self, train_data, vald_data, **kwargs):
        """Local training function

        Args:
            train_data (list): training data
            vald_data (list): validation data (optional)

        Returns:
            dict: train info that will be used for aggregation
        """
        return self.estimator.train(train_data, vald_data, **kwargs)

    def get_weights(self):
        """get the weights of the model

        Returns:
            list: weights of the model
        """
        return self.estimator.get_weights()

    def set_weights(self, weights):
        """set the weights of the model

        Args:
            weights (list): set the weights of the model
        """
        self.estimator.set_weights(weights)

    def helper_function(self, helper_info):
        """helper function that can be used for any purpose

        Args:
            helper_info (dict): helper info that generated by the server's helper function

        Returns:
            None: None
        """
        return self.estimator.helper_function(helper_info)
